/*
 * Copyright 2022 mcgrady
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mcgrady.xproject.retromusic.util

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import com.bumptech.glide.load.resource.bitmap.RoundedCorners
import com.mcgrady.xproject.retromusic.R
import com.mcgrady.xproject.retromusic.glide.GlideApp
import com.mcgrady.xproject.retromusic.model.Song
import com.mcgrady.xproject.retromusic.util.MergedImageUtils.joinImages
import com.mcgrady.xproject.retromusic.util.MusicUtil.getMediaStoreAlbumCoverUri

object AutoGeneratedPlaylistBitmap {
    fun getBitmap(
        context: Context,
        songPlaylist: List<Song>?
    ): Bitmap? {
        if (songPlaylist == null || songPlaylist.isEmpty()) return getDefaultBitmap(context)
        if (songPlaylist.size == 1) return getBitmapWithAlbumId(context, songPlaylist[0].albumId)
        val albumID: MutableList<Long> = ArrayList()
        for (song in songPlaylist) {
            if (!albumID.contains(song.albumId)) albumID.add(song.albumId)
        }
        val art: MutableList<Bitmap> = ArrayList()
        for (id in albumID) {
            val bitmap = getBitmapWithAlbumId(context, id)
            if (bitmap != null) art.add(bitmap)
            if (art.size == 9) break
        }
        return joinImages(art)
    }

    private fun getBitmapWithAlbumId(context: Context, id: Long): Bitmap? {
        return try {
            GlideApp.with(context)
                .asBitmap()
                .transform(RoundedCorners(20))
                .load(getMediaStoreAlbumCoverUri(id))
                .submit(200, 200)
                .get()
        } catch (e: Exception) {
            null
        }
    }

    private fun getDefaultBitmap(context: Context): Bitmap {
        return BitmapFactory.decodeResource(context.resources, R.drawable.default_album_art)
    }
}
