//apply plugin: 'walle'
//
//walle {
//    //指定渠道包的输出路径
//    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
//    //定制渠道包的APK的文件名称
//    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'
//    // 渠道配置文件
////    channelFile = new File("${project.getProjectDir()}/channel")
//    //渠道&额外信息配置文件，与channelFile互斥
//    configFile = new File("${project.getProjectDir()}/config.json")
//}

apply plugin: 'com.tencent.vasdolly'

//VasDolly插件配置
//gradle channelDebug/channelRelease 编译生成apk后，再根据生成的Apk生成渠道包
channel{
    channelFile = file("channel.txt")
    //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    outputDir = new File(project.buildDir,"channels")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}-${buildTime}
    apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    fastMode = false
    //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
    buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}

// gradle rebuildChannel 配置此任务用于不希望重新构建apk，直接根据指定的apk生成渠道包
rebuildChannel {
    channelFile = file("channel.txt")
    //指定的apk生成渠道包,文件名中如果有base将被替换为渠道名，否则渠道名将作为前缀
    baseApk = new File(project.buildDir, "outputs/apk/debug/app-debug.apk")
    //默认为new File(project.buildDir, "rebuildChannel")
    outputDir = new File(project.buildDir, "rebuildChannels")
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    fastMode = false
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}


ext {

    reinForceJarPath = "${project.rootDir}/360jiagu/jiagu.jar"
    keyStorePath = "${rootProject.rootDir}/app/keystore/release.keystore"
    rein360ForceDirPath = "${rootProject.rootDir}/360jiagu"
    reinForcedOutPutPath = "${rootProject.rootDir}/app/build/outputs/apk/release/channels"
    rein360ForceJarPath = "${rein360ForceDirPath}/jiagu.jar"
    account360 = "mcgrady911@foxmail.com"
    psw360 = "mcgrady@360"
    mulpkgPath = "${rein360ForceDirPath}/多渠道模板.txt"

    jarPath = "${project.rootDir}/vasdolly/VasDolly.jar"
    channelsPath = "${project.rootDir}/vasdolly/channels.txt"
    outputChannelsFilePath = "${project.rootDir}/app/build/outputs/apk/release/channels/"


    /**
     * 找出release文件app build 文件夹中
     * 只能匹配出 以apk结尾 并且包含release字符串的apk文件
     */
    findReleaseApkPath = { ->
        def appBuildOutPut = new File("${rootProject.rootDir}/app/build/outputs/apk/release")
        def apkFile = null
        appBuildOutPut.eachFile {
            if (it.name.endsWith(".apk") && it.name.contains("release")) {
                println(it)
                apkFile = it
            }
        }
        return apkFile
    }

    /**
     * 通过调用360的命令行加固并且多渠道打包
     * apk ->  原有release包的文件
     * outputPath -> 多渠道打包后文件输出路径
     */
    buildMultipleChannels = { File apk, File outPutPath ->
        println(outPutPath)
        if (apk == null || !apk.exists()) {
            throw new FileNotFoundException("没有找到APK文件")
        }
        if (!outPutPath.exists()) {
            outPutPath.mkdirs()
        }

        def cmd = "java -jar ${jarPath} put -c ${channelsPath} ${apk} ${outPutPath}"
        println cmd
        cmd.execute().waitForProcessOutput(System.out, System.err)
    }

    /**
     * 通过调用360的命令行加固并且多渠道打包
     * apk ->  原有release包的文件
     * outputPath -> 多渠道打包后文件输出路径
     */
    reinForceApk = { File apk, File outPutPath ->
        println(outPutPath)
        if (apk == null || !apk.exists()) {
            println("没有找到apk文件")
            throw new FileNotFoundException("没有找到APK文件")
        }
        if (!outPutPath.exists()) {
            outPutPath.mkdirs()
        }

        //登录
        "java -jar ${rein360ForceJarPath} -login ${account360} ${psw360}".execute().waitForProcessOutput(System.out, System.err)
        //导入渠道列表
        "java -jar ${rein360ForceJarPath} -importmulpkg ${mulpkgPath}".execute().waitForProcessOutput(System.out, System.err)
        //导入签名
        "java -jar ${rein360ForceJarPath} –importsign ${keyStorePath} ${KEYSTORE_PASSWORD} ${KEY_ALIAS} ${KEY_PASSWORD}".execute().waitForProcessOutput(System.out, System.err)
        "java -jar ${rein360ForceJarPath} -config  -analyse".execute().waitForProcessOutput(System.out, System.err)
        //加固 多渠道
        "java -jar ${rein360ForceJarPath} -jiagu ${apk.path} ${outPutPath.path} -autosign -automulpkg".execute().waitForProcessOutput(System.out, System.err)
    }
}

