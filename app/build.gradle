plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.mcgrady.xproject"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            zipAlignEnabled = true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // As of Gradle Android plugin 1.1.0, the test APK has a separate config
            testProguardFile 'proguard-rules-test.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    /**
     * 修改 Android 12 因为 exported 的构建问题
     */
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def processManifest = output.getProcessManifestProvider().get()
            processManifest.doLast { task ->
                def outputDir = task.multiApkManifestOutputDirectory
                File outputDirectory
                if (outputDir instanceof File) {
                    outputDirectory = outputDir
                } else {
                    outputDirectory = outputDir.get().asFile
                }
                File manifestOutFile = file("$outputDirectory/AndroidManifest.xml")
                println("----------- ${manifestOutFile} ----------- ")

                if (manifestOutFile.exists() && manifestOutFile.canRead() && manifestOutFile.canWrite()) {
                    def manifestFile = manifestOutFile
                    ///这里第二个参数是 false ，所以 namespace 是展开的，所以下面不能用 androidSpace，而是用 nameTag
                    def xml = new XmlParser(false, false).parse(manifestFile)
                    def exportedTag = "android:exported"
                    def nameTag = "android:name"
                    ///指定 space
                    //def androidSpace = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')

                    def nodes = xml.application[0].'*'.findAll {
                        //挑选要修改的节点，没有指定的 exported 的才需要增加
                        //如果 exportedTag 拿不到可以尝试 it.attribute(androidSpace.exported)
                        (it.name() == 'activity' || it.name() == 'receiver' || it.name() == 'service') && it.attribute(exportedTag) == null

                    }
                    ///添加 exported，默认 false
                    nodes.each {
                        def isMain = false
                        it.each {
                            if (it.name() == "intent-filter") {
                                it.each {
                                    if (it.name() == "action") {
                                        //如果 nameTag 拿不到可以尝试 it.attribute(androidSpace.name)
                                        if (it.attributes().get(nameTag) == "android.intent.action.MAIN") {
                                            isMain = true
                                            println("......................MAIN FOUND......................")
                                        }
                                    }
                                }
                            }
                        }
                        it.attributes().put(exportedTag, "${isMain}")
                    }

                    PrintWriter pw = new PrintWriter(manifestFile)
                    pw.write(groovy.xml.XmlUtil.serialize(xml))
                    pw.close()

                }

            }
        }
    }
}

dependencies {
    implementation project(':common-core')

    //hilt
    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt "com.google.dagger:hilt-android-compiler:2.38.1"

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
}
