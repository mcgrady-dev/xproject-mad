apply plugin: 'com.diffplug.spotless'

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    //ratchetFrom 'origin/develop'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    kotlin {
        target "**/*.kt"
        ktlint("0.45.2")
                .userData([
                        'disabled_rules': 'no-wildcard-imports'
                ])
        licenseHeaderFile "$rootDir/license.kt"
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

//preBuild.dependsOn spotlessCheck
//preBuild.dependsOn spotlessApply

task spotlessPreCommitHook() {
    def gitHooksDirectory = new File("$project.rootDir/.git/hooks/")
    if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
    new File("$project.rootDir/.git/hooks", "pre-commit").text = """
#!/bin/bash
echo "Running spotless check"
set -e
  ./gradlew -PdisableSpotlessCheck spotlessApply
result=\$?
printf "the spotless check result code is \$result"
if [[ "\$result" = 0 ]] ; then
    echo "\\033[32m
    ....
    ....
    SpotlessCheck Pass!!
    ....
    ....
    \\033[0m"
    exit 0
else
    ./gradlew format
    echo "\\033[31m
    ....
    ....
    SpotlessCheck Failed!!
    代码格式有问题;
    ....
    已经自动调整格式,review代码后再git add . && git commit
    ....
    ....
    \\033[0m"
    exit 1
fi
"""
    "chmod +x .git/hooks/pre-commit".execute()
}

//task createSpotlessPreCommitHook() {
//    def gitHooksDirectory = new File("$project.rootDir/.git/hooks/")
//    if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
//    new File("$project.rootDir/.git/hooks", "pre-commit").text = """
//#!/bin/sh
//
//# Part 1
//stagedFiles=$(git diff --staged --name-only)
//# Part 2
//echo "Running spotlessApply. Formatting code..."
//./gradlew spotlessApply
//# Part 3
//for file in $stagedFiles; do
//  if test -f "$file"; then
//    git add $file
//  fi
//done
//"""
//    "chmod +x .git/hooks/pre-commit".execute()
//}